#!/bin/bash
#
# This is a positional arguments-only example of Argbash potential
#
# ARG_HELP([The general script's help msg])
# ARG_POSITIONAL_SINGLE([token],[token])
# ARG_POSITIONAL_SINGLE([name],[name for the node])
# ARG_POSITIONAL_SINGLE([location],[location ID])
# ARG_POSITIONAL_SINGLE([fqdn],[FDQN or ip of the node])
# ARG_POSITIONAL_SINGLE([ram],[Max ram in MB])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-h|--help] <token> <name> <location> <fqdn> <ram>\n' "$0"
	printf '\t%s\n' "<token>: token"
	printf '\t%s\n' "<name>: name for the node"
	printf '\t%s\n' "<location>: location ID"
	printf '\t%s\n' "<fqdn>: FDQN or ip of the node"
	printf '\t%s\n' "<ram>: Max ram in MB"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'token', 'name', 'location', 'fqdn' and 'ram'"
	test "${_positionals_count}" -ge 5 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 5 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 5 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_token _arg_name _arg_location _arg_fqdn _arg_ram "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo "Value of first argument: $_arg_token"
echo "Value of second argument: $_arg_name"
echo "Value of third argument: $_arg_location"
echo "Value of fourth argument: $_arg_fqdn"
echo "Value of fifth argument: $_arg_ram"

id=`curl "http://condor.jcedeno.us/api/application/nodes" \
  -H 'Accept: application/json' \
  -H 'Content-Type: application/json' \
  -H "Authorization: Bearer $_arg_token" \
  -X POST \
  -d "{
  \"name\": \"$_arg_name\",
  \"location_id\": $_arg_location,
  \"fqdn\": \"$_arg_fqdn\",
  \"scheme\": \"http\",
  \"memory\": $_arg_ram,
  \"memory_overallocate\": 0,
  \"disk\": 50000,
  \"disk_overallocate\": 0,
  \"upload_size\": 100,
  \"daemon_sftp\": 2022,
  \"daemon_listen\": 8080
}" | jq -r '.attributes.id' `

echo "ID nodo = $id"
#Auto configure
cd /etc/pterodactyl && sudo wings configure --panel-url http://condor.jcedeno.us --token $_arg_token --node $id

#Allocate IPS

curl "http://condor.jcedeno.us/api/application/nodes/$id/allocations" \
  -H 'Accept: application/json' \
  -H 'Content-Type: application/json' \
  -H "Authorization: Bearer $_arg_token" \
  -X POST \
  -d "{
  \"ip\": $IP,
  \"ports\": [
    \"25560\",
    \"25561\",
    \"25562\",
    \"25563\",
    \"25564\",
    \"25565\",
    \"25566\",
    \"25567\",
    \"25568\",
    \"25569\"
  ]
}"

# ] <-- needed because of Argbash
